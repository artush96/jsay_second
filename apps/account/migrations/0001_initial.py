# Generated by Django 3.2.9 on 2021-11-17 15:15

import apps.account.models
import django.contrib.postgres.fields
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='адрес электронной почты')),
                ('email_send_time', models.DateTimeField(blank=True, null=True, verbose_name='время отправки письма активации')),
                ('check_email', models.BooleanField(default=True, verbose_name='необходимо проверить эл. почту')),
                ('first_name', models.CharField(max_length=30, verbose_name='имя')),
                ('last_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='фамилия')),
                ('middle_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='отчество')),
                ('gender', models.CharField(choices=[('0', '--'), ('1', 'М'), ('2', 'Ж')], default=0, max_length=25, verbose_name='пол')),
                ('water', models.IntegerField(default=1500, verbose_name='норма воды')),
                ('bottles', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=apps.account.models.bottles_variants_default, size=None, verbose_name='варианты бутылок')),
                ('water_norm', django.contrib.postgres.fields.ArrayField(base_field=models.DateField(), blank=True, default=list, size=None, verbose_name='дни превышения нормы')),
                ('d_rate', django.contrib.postgres.fields.ArrayField(base_field=models.DateField(), blank=True, default=list, size=None, verbose_name='даты дневной нормы')),
                ('d_active', django.contrib.postgres.fields.ArrayField(base_field=models.DateField(), blank=True, default=list, size=None, verbose_name='даты посещений')),
                ('expiry_date', models.DateTimeField(blank=True, null=True, verbose_name='срок действия подписки')),
                ('auth_attempt', models.IntegerField(default=0, verbose_name='попытки авторизации')),
                ('is_blocked', models.DateTimeField(blank=True, null=True, verbose_name='заблокирован до')),
                ('newsletters', models.BooleanField(default=True, verbose_name='подписка на новости')),
                ('is_staff', models.BooleanField(default=False, verbose_name='статус персонала')),
                ('is_active', models.BooleanField(default=True, verbose_name='активный')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='дата регистрации')),
                ('last_seen', models.DateTimeField(auto_now_add=True)),
                ('authorized', models.CharField(choices=[('0', 'Соц. сети'), ('1', 'Эл. почта')], default=0, max_length=25, verbose_name='авторизован по')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'учетная запись',
                'verbose_name_plural': 'Учетные записи',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', apps.account.models.CUserManager()),
            ],
        ),
    ]
